// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CommonMetadata {
    #[prost(string, tag = "1")]
    pub agent_version: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub timezone: ::prost::alloc::string::String,
    #[prost(double, tag = "3")]
    pub current_epoch: f64,
    #[prost(string, tag = "4")]
    pub internal_ip: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub public_ip: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub api_key: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Origin {
    #[prost(uint32, tag = "4")]
    pub origin_product: u32,
    #[prost(uint32, tag = "5")]
    pub origin_category: u32,
    #[prost(uint32, tag = "6")]
    pub origin_service: u32,
}
/// Metadata is used in both the MetricSeries and Sketch messages defined below.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Metadata {
    #[prost(message, optional, tag = "1")]
    pub origin: ::core::option::Option<Origin>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MetricPayload {
    #[prost(message, repeated, tag = "1")]
    pub series: ::prost::alloc::vec::Vec<metric_payload::MetricSeries>,
}
/// Nested message and enum types in `MetricPayload`.
pub mod metric_payload {
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct MetricPoint {
        /// metric value
        #[prost(double, tag = "1")]
        pub value: f64,
        /// timestamp for this value in seconds since the UNIX epoch
        #[prost(int64, tag = "2")]
        pub timestamp: i64,
    }
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Resource {
        #[prost(string, tag = "1")]
        pub r#type: ::prost::alloc::string::String,
        #[prost(string, tag = "2")]
        pub name: ::prost::alloc::string::String,
    }
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct MetricSeries {
        /// Resources this series applies to; include at least
        /// { type="host", name=<hostname> }
        #[prost(message, repeated, tag = "1")]
        pub resources: ::prost::alloc::vec::Vec<Resource>,
        /// metric name
        #[prost(string, tag = "2")]
        pub metric: ::prost::alloc::string::String,
        /// tags for this metric
        #[prost(string, repeated, tag = "3")]
        pub tags: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
        /// data points for this metric
        #[prost(message, repeated, tag = "4")]
        pub points: ::prost::alloc::vec::Vec<MetricPoint>,
        /// type of metric
        #[prost(enumeration = "MetricType", tag = "5")]
        pub r#type: i32,
        /// metric unit name
        #[prost(string, tag = "6")]
        pub unit: ::prost::alloc::string::String,
        /// source of this metric (check name, etc.)
        #[prost(string, tag = "7")]
        pub source_type_name: ::prost::alloc::string::String,
        /// interval, in seconds, between samples of this metric
        #[prost(int64, tag = "8")]
        pub interval: i64,
        /// Metrics origin metadata
        #[prost(message, optional, tag = "9")]
        pub metadata: ::core::option::Option<super::Metadata>,
    }
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum MetricType {
        Unspecified = 0,
        Count = 1,
        Rate = 2,
        Gauge = 3,
    }
    impl MetricType {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unspecified => "UNSPECIFIED",
                Self::Count => "COUNT",
                Self::Rate => "RATE",
                Self::Gauge => "GAUGE",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "UNSPECIFIED" => Some(Self::Unspecified),
                "COUNT" => Some(Self::Count),
                "RATE" => Some(Self::Rate),
                "GAUGE" => Some(Self::Gauge),
                _ => None,
            }
        }
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EventsPayload {
    #[prost(message, repeated, tag = "1")]
    pub events: ::prost::alloc::vec::Vec<events_payload::Event>,
    #[prost(message, optional, tag = "2")]
    pub metadata: ::core::option::Option<CommonMetadata>,
}
/// Nested message and enum types in `EventsPayload`.
pub mod events_payload {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Event {
        #[prost(string, tag = "1")]
        pub title: ::prost::alloc::string::String,
        #[prost(string, tag = "2")]
        pub text: ::prost::alloc::string::String,
        #[prost(int64, tag = "3")]
        pub ts: i64,
        #[prost(string, tag = "4")]
        pub priority: ::prost::alloc::string::String,
        #[prost(string, tag = "5")]
        pub host: ::prost::alloc::string::String,
        #[prost(string, repeated, tag = "6")]
        pub tags: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
        #[prost(string, tag = "7")]
        pub alert_type: ::prost::alloc::string::String,
        #[prost(string, tag = "8")]
        pub aggregation_key: ::prost::alloc::string::String,
        #[prost(string, tag = "9")]
        pub source_type_name: ::prost::alloc::string::String,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SketchPayload {
    #[prost(message, repeated, tag = "1")]
    pub sketches: ::prost::alloc::vec::Vec<sketch_payload::Sketch>,
    #[prost(message, optional, tag = "2")]
    pub metadata: ::core::option::Option<CommonMetadata>,
}
/// Nested message and enum types in `SketchPayload`.
pub mod sketch_payload {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Sketch {
        #[prost(string, tag = "1")]
        pub metric: ::prost::alloc::string::String,
        #[prost(string, tag = "2")]
        pub host: ::prost::alloc::string::String,
        #[prost(message, repeated, tag = "3")]
        pub distributions: ::prost::alloc::vec::Vec<sketch::Distribution>,
        #[prost(string, repeated, tag = "4")]
        pub tags: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
        #[prost(message, repeated, tag = "7")]
        pub dogsketches: ::prost::alloc::vec::Vec<sketch::Dogsketch>,
        #[prost(message, optional, tag = "8")]
        pub metadata: ::core::option::Option<super::Metadata>,
    }
    /// Nested message and enum types in `Sketch`.
    pub mod sketch {
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct Distribution {
            #[prost(int64, tag = "1")]
            pub ts: i64,
            #[prost(int64, tag = "2")]
            pub cnt: i64,
            #[prost(double, tag = "3")]
            pub min: f64,
            #[prost(double, tag = "4")]
            pub max: f64,
            #[prost(double, tag = "5")]
            pub avg: f64,
            #[prost(double, tag = "6")]
            pub sum: f64,
            #[prost(double, repeated, tag = "7")]
            pub v: ::prost::alloc::vec::Vec<f64>,
            #[prost(uint32, repeated, tag = "8")]
            pub g: ::prost::alloc::vec::Vec<u32>,
            #[prost(uint32, repeated, tag = "9")]
            pub delta: ::prost::alloc::vec::Vec<u32>,
            #[prost(double, repeated, tag = "10")]
            pub buf: ::prost::alloc::vec::Vec<f64>,
        }
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct Dogsketch {
            #[prost(int64, tag = "1")]
            pub ts: i64,
            #[prost(int64, tag = "2")]
            pub cnt: i64,
            #[prost(double, tag = "3")]
            pub min: f64,
            #[prost(double, tag = "4")]
            pub max: f64,
            #[prost(double, tag = "5")]
            pub avg: f64,
            #[prost(double, tag = "6")]
            pub sum: f64,
            #[prost(sint32, repeated, tag = "7")]
            pub k: ::prost::alloc::vec::Vec<i32>,
            #[prost(uint32, repeated, tag = "8")]
            pub n: ::prost::alloc::vec::Vec<u32>,
        }
    }
}
